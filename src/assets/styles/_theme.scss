@use 'sass:color';

// Light Theme Variables
$light-primary-bg: white;
$light-secondary-bg: color.scale($light-primary-bg, $lightness: -10%);
$light-primary-text: $colour-primary-grey;
$light-primary-border: $colour-primary-grey;
$light-button-text: $colour-primary-grey;
$light-button-bg: $colour-primary-grey;
$light-button-border: $colour-primary-grey;

// Dark Theme Variables
$dark-primary-bg: $colour-primary-grey;
$dark-secondary-bg: color.scale($dark-primary-bg, $lightness: 10%);
$dark-primary-text: white;
$dark-primary-border: white;
$dark-button-text: white;
$dark-button-bg: white;
$dark-button-border: white;

// Theme Map
$themes: (
  light: (
    primary-bg: $light-primary-bg,
    secondary-bg: $light-secondary-bg,
    primary-text: $light-primary-text,
    primary-border: $light-primary-border,
    button-text: $light-primary-text,
    button-text-focus: color.scale($light-button-text, $lightness: -20%),
    button-bg: $light-button-bg,
    button-bg-focus: color.scale($light-button-bg, $lightness: -20%),
    button-border: $light-button-border,
    button-border-focus: color.scale($light-button-border, $lightness: -20%),
  ),
  dark: (
    primary-bg: $dark-primary-bg,
    secondary-bg: $dark-secondary-bg,
    primary-text: $dark-primary-text,
    primary-border: $dark-primary-border,
    button-text: $dark-primary-text,
    button-text-focus: color.scale($dark-button-text, $lightness: -20%),
    button-bg: $dark-button-bg,
    button-bg-focus: color.scale($dark-button-bg, $lightness: -20%),
    button-border: $dark-button-border,
    button-border-focus: color.scale($dark-button-border, $lightness: -20%),
  ),
);

@mixin useTheme() {
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      $theme-map: () !global;
      @each $key, $sub-map in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}

@function getTextColorBasedOnBG($color) {
  @if (color.channel($color, 'lightness', $space: hsl) > 50) {
    @return $colour-primary-grey;
  } @else {
    @return white;
  }
}

@mixin applyThemedBgWithCorrectTextColor($bg-color) {
  @include useTheme() {
    background-color: themed($bg-color);
    color: getTextColorBasedOnBG(themed($bg-color));
  }
}
